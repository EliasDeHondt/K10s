#################################
# @author K10s Open Source Team #
# @since 01/01/2025             #
#################################
---
apiVersion: v1
kind: Namespace
metadata:
  name: k10s-namespaces
  labels:
    name: k10s
    app: k10s
    environment: production
  annotations:
    description: This namespace is used for the k10s application.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k10s-frontend-deployment
  namespace: k10s-namespaces
spec:
  replicas: 3
  selector:
    matchLabels:
      app: k10s-frontend
  template:
    metadata:
      labels:
        app: k10s-frontend
    spec:
      containers:
      - name: k10s-frontend
        image: "ghcr.io/eliasdehondt/k10s-frontend:latest"
        ports:
        - containerPort: 8081
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
---
apiVersion: v1
kind: Service
metadata:
  name: k10s-frontend-service
  namespace: k10s-namespaces
spec:
  selector:
    app: k10s-frontend
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k10s-backend-deployment
  namespace: k10s-namespaces
spec:
  replicas: 3
  selector:
    matchLabels:
      app: k10s-backend
  template:
    metadata:
      labels:
        app: k10s-backend
    spec:
      serviceAccountName: k10s-backend-serviceaccount
      containers:
      - name: k10s-backend
        image: "ghcr.io/eliasdehondt/k10s-backend:latest"
        ports:
        - containerPort: 8082
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        env:
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: k10s-secret-jwt
              key: JWT_SECRET
        - name: USERNAME
          valueFrom:
            secretKeyRef:
              name: k10s-secret-user
              key: USERNAME
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: k10s-secret-user
              key: PASSWORD
        - name: FRONTEND_URL
          value: "http://k10s-frontend-service.k10s-namespaces.svc.cluster.local:8081"
---
apiVersion: v1
kind: Service
metadata:
  name: k10s-backend-service
  namespace: k10s-namespaces
spec:
  selector:
    app: k10s-backend
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k10s-backend-serviceaccount
  namespace: k10s-namespaces
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k10s-backend-clusterrole
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "nodes", "namespaces", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k10s-backend-clusterrole-binding
subjects:
- kind: ServiceAccount
  name: k10s-backend-serviceaccount
  namespace: k10s-namespaces
roleRef:
  kind: ClusterRole
  name: k10s-backend-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k10s-ingress-deployment
  namespace: k10s-namespaces
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k10s-ingress
  template:
    metadata:
      labels:
        app: k10s-ingress
    spec:
      containers:
      - name: k10s-ingress
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: ingress-config
          mountPath: /etc/nginx/ingress.conf
          subPath: ingress.conf
      volumes:
      - name: ingress-config
        configMap:
          name: k10s-ingress-config
---
apiVersion: v1
kind: Service
metadata:
  name: k10s-ingress-service
  namespace: k10s-namespaces
spec:
  selector:
    app: k10s-ingress
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k10s-ingress-config
  namespace: k10s-namespaces
data:
  ingress.conf: |
    events {
      worker_connections 1024;
    }
    http {
      server {
        listen 80;

        location / {
          proxy_pass http://k10s-frontend-service:8081;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api {
          proxy_pass http://k10s-backend-service:8082;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
      }
    }
---